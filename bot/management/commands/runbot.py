from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove,InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler
)
from django.core.management.base import BaseCommand
from django.conf import settings
from bot.models import TelegramUser, Reminder
from asgiref.sync import sync_to_async
from datetime import datetime, timedelta
from django.utils import timezone

GET_TEXT, GET_TIME = range(2)

@sync_to_async
def get_or_create_user(user_info):
    user, created = TelegramUser.objects.get_or_create(
        chat_id=user_info.id,
        defaults={'username': user_info.username, 'first_name': user_info.first_name}
    )
    return user, created


@sync_to_async
def create_reminder_db(user, text, remind_at):
    Reminder.objects.create(user=user, text=text, remind_at=remind_at)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_info = update.message.from_user
    user, created = await get_or_create_user(user_info)

    reply_keyboard = [["–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"], ["–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"]]

    if created:
        reply_text = f'–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø —Ç–≤–æ–π –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.'
    else:
        reply_text = f'–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name}!'

    await update.message.reply_text(
        reply_text,
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True),
    )


async def new_reminder_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        '–•–æ—Ä–æ—à–æ, –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n'
        '–ö–∞–∫–æ–π —Ç–µ–∫—Å—Ç –º–Ω–µ –Ω—É–∂–Ω–æ –∑–∞–ø–æ–º–Ω–∏—Ç—å? (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã)',
        reply_markup=ReplyKeyboardRemove(),
    )
    return GET_TEXT


async def get_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['reminder_text'] = update.message.text
    await update.message.reply_text(
        '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú).',
    )
    return GET_TIME


async def get_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    remind_time_str = update.message.text
    try:
        naive_time = datetime.strptime(remind_time_str, '%H:%M').time()
        now = timezone.now()

        aware_datetime = timezone.make_aware(datetime.combine(now.date(), naive_time))

        if aware_datetime < now:
            aware_datetime += timedelta(days=1)

        user_info = update.message.from_user
        user, _ = await get_or_create_user(user_info)

        reminder_text = context.user_data['reminder_text']
        await create_reminder_db(user, reminder_text, aware_datetime)

        day_text = "—Å–µ–≥–æ–¥–Ω—è" if aware_datetime.date() == now.date() else "–∑–∞–≤—Ç—Ä–∞"
        await update.message.reply_text(
            f'–ì–æ—Ç–æ–≤–æ! –Ø –Ω–∞–ø–æ–º–Ω—é —Ç–µ–±–µ "{reminder_text}" {day_text} –≤ {remind_time_str}.'
        )

        reply_keyboard = [["–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"], ["–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"]]
        await update.message.reply_text(
            '–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?',
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True),
        )
        return ConversationHandler.END

    except ValueError:
        await update.message.reply_text('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú.')
        return GET_TIME


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=ReplyKeyboardRemove()
    )
    reply_keyboard = [["–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"], ["–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"]]
    await update.message.reply_text(
        '–ß—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ?',
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True),
    )
    return ConversationHandler.END


@sync_to_async()
def get_user_reminders(user):
    reminders = []
    for reminder in user.reminder_set.all():
        reminders.append(reminder)
    return list(user.reminder_set.order_by('remind_at'))


async def show_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_info = update.message.from_user
    user, _ = await get_or_create_user(user_info)
    reminders = await get_user_reminders(user)

    if not reminders:
        await update.message.reply_text('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.')
        return

    await update.message.reply_text('–í–æ—Ç —Ç–≤–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):')
    for reminder in reminders:
        local_time = reminder.remind_at.astimezone(timezone.get_current_timezone())

        callback_data = f"delete_{reminder.id}"

        keyboard = [
            [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å üóëÔ∏è", callback_data=callback_data)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        message_text = f"‚ñ™Ô∏è {reminder.text} –≤ {local_time.strftime('%H:%M %d.%m.%Y')}"

        await update.message.reply_text(text=message_text, reply_markup=reply_markup)

@sync_to_async
def delete_reminder_db(reminder_id, user_chat_id):
    try:
        reminder = Reminder.objects.get(id=reminder_id, user__chat_id=user_chat_id)
        reminder.delete()
        return True
    except Reminder.DoesNotExist:
        return False

async def button_callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    data = query.data
    if data.startswith("delete_"):
        reminder_id = int(data.split("_")[1])
        user_chat_id = query.from_user.id

        was_deleted = await delete_reminder_db(reminder_id, user_chat_id)

        if was_deleted:
            await query.edit_message_text(text=f'‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ')
        else:
            await query.edit_message_text(text=f'–≠—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ')


class Command(BaseCommand):
    help = '–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞'

    def handle(self, *args, **options):
        application = Application.builder().token(settings.TELEGRAM_BOT_TOKEN).build()
        application.add_handler(MessageHandler(filters.Regex('^–ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è$'), show_reminders))
        application.add_handler(CallbackQueryHandler(button_callback_handler))

        conv_handler = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex('^–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ$'), new_reminder_start)],
            states={
                GET_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_text)],
                GET_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_time)],
            },
            fallbacks=[CommandHandler('cancel', cancel)],
        )

        application.add_handler(CommandHandler("start", start))
        application.add_handler(conv_handler)

        self.stdout.write(self.style.SUCCESS('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω...'))
        application.run_polling()